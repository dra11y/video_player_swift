// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct TextureMessage {
  var textureId: Int64

  static func fromList(_ list: [Any?]) -> TextureMessage? {
    let textureId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)

    return TextureMessage(
      textureId: textureId
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LoopingMessage {
  var textureId: Int64
  var isLooping: Bool

  static func fromList(_ list: [Any?]) -> LoopingMessage? {
    let textureId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let isLooping = list[1] as! Bool

    return LoopingMessage(
      textureId: textureId,
      isLooping: isLooping
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      isLooping,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct VolumeMessage {
  var textureId: Int64
  var volume: Double

  static func fromList(_ list: [Any?]) -> VolumeMessage? {
    let textureId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let volume = list[1] as! Double

    return VolumeMessage(
      textureId: textureId,
      volume: volume
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      volume,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlaybackSpeedMessage {
  var textureId: Int64
  var speed: Double

  static func fromList(_ list: [Any?]) -> PlaybackSpeedMessage? {
    let textureId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let speed = list[1] as! Double

    return PlaybackSpeedMessage(
      textureId: textureId,
      speed: speed
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      speed,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PositionMessage {
  var textureId: Int64
  var position: Int64

  static func fromList(_ list: [Any?]) -> PositionMessage? {
    let textureId = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let position = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)

    return PositionMessage(
      textureId: textureId,
      position: position
    )
  }
  func toList() -> [Any?] {
    return [
      textureId,
      position,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CreateMessage {
  var asset: String? = nil
  var uri: String? = nil
  var packageName: String? = nil
  var formatHint: String? = nil
  var httpHeaders: [String?: String?]

  static func fromList(_ list: [Any?]) -> CreateMessage? {
    let asset: String? = nilOrValue(list[0])
    let uri: String? = nilOrValue(list[1])
    let packageName: String? = nilOrValue(list[2])
    let formatHint: String? = nilOrValue(list[3])
    let httpHeaders = list[4] as! [String?: String?]

    return CreateMessage(
      asset: asset,
      uri: uri,
      packageName: packageName,
      formatHint: formatHint,
      httpHeaders: httpHeaders
    )
  }
  func toList() -> [Any?] {
    return [
      asset,
      uri,
      packageName,
      formatHint,
      httpHeaders,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MixWithOthersMessage {
  var mixWithOthers: Bool

  static func fromList(_ list: [Any?]) -> MixWithOthersMessage? {
    let mixWithOthers = list[0] as! Bool

    return MixWithOthersMessage(
      mixWithOthers: mixWithOthers
    )
  }
  func toList() -> [Any?] {
    return [
      mixWithOthers,
    ]
  }
}

private class SwiftVideoPlayerApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return CreateMessage.fromList(self.readValue() as! [Any?])
      case 129:
        return LoopingMessage.fromList(self.readValue() as! [Any?])
      case 130:
        return MixWithOthersMessage.fromList(self.readValue() as! [Any?])
      case 131:
        return PlaybackSpeedMessage.fromList(self.readValue() as! [Any?])
      case 132:
        return PositionMessage.fromList(self.readValue() as! [Any?])
      case 133:
        return TextureMessage.fromList(self.readValue() as! [Any?])
      case 134:
        return VolumeMessage.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class SwiftVideoPlayerApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CreateMessage {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? LoopingMessage {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MixWithOthersMessage {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PlaybackSpeedMessage {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? PositionMessage {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? TextureMessage {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? VolumeMessage {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SwiftVideoPlayerApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SwiftVideoPlayerApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SwiftVideoPlayerApiCodecWriter(data: data)
  }
}

class SwiftVideoPlayerApiCodec: FlutterStandardMessageCodec {
  static let shared = SwiftVideoPlayerApiCodec(readerWriter: SwiftVideoPlayerApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SwiftVideoPlayerApi {
  func initialize() throws
  func create(msg: CreateMessage) throws -> TextureMessage
  func dispose(msg: TextureMessage) throws
  func setLooping(msg: LoopingMessage) throws
  func setVolume(msg: VolumeMessage) throws
  func setPlaybackSpeed(msg: PlaybackSpeedMessage) throws
  func play(msg: TextureMessage) throws
  func position(msg: TextureMessage) throws -> PositionMessage
  func seekTo(msg: PositionMessage, completion: @escaping (Result<Void, Error>) -> Void)
  func pause(msg: TextureMessage) throws
  func setMixWithOthers(msg: MixWithOthersMessage) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SwiftVideoPlayerApiSetup {
  /// The codec used by SwiftVideoPlayerApi.
  static var codec: FlutterStandardMessageCodec { SwiftVideoPlayerApiCodec.shared }
  /// Sets up an instance of `SwiftVideoPlayerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SwiftVideoPlayerApi?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        do {
          try api.initialize()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.create", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! CreateMessage
        do {
          let result = try api.create(msg: msgArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.dispose", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! TextureMessage
        do {
          try api.dispose(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
    let setLoopingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.setLooping", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLoopingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! LoopingMessage
        do {
          try api.setLooping(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLoopingChannel.setMessageHandler(nil)
    }
    let setVolumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.setVolume", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVolumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! VolumeMessage
        do {
          try api.setVolume(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setVolumeChannel.setMessageHandler(nil)
    }
    let setPlaybackSpeedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.setPlaybackSpeed", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPlaybackSpeedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! PlaybackSpeedMessage
        do {
          try api.setPlaybackSpeed(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPlaybackSpeedChannel.setMessageHandler(nil)
    }
    let playChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.play", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! TextureMessage
        do {
          try api.play(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playChannel.setMessageHandler(nil)
    }
    let positionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.position", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      positionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! TextureMessage
        do {
          let result = try api.position(msg: msgArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      positionChannel.setMessageHandler(nil)
    }
    let seekToChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.seekTo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      seekToChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! PositionMessage
        api.seekTo(msg: msgArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      seekToChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.pause", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! TextureMessage
        do {
          try api.pause(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let setMixWithOthersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.video_player_swift.SwiftVideoPlayerApi.setMixWithOthers", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMixWithOthersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! MixWithOthersMessage
        do {
          try api.setMixWithOthers(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMixWithOthersChannel.setMessageHandler(nil)
    }
  }
}
